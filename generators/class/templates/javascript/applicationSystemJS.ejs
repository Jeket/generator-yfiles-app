window.define = System.amdDefine;
window.require = System.amdRequire;
System.config({
  // This option makes the app work from filesystem, but prevents
  // loading of CHS modules - you probably don't want to use it for production.
  meta: { '*': { scriptLoad: true } },
  map: {
    'yfiles': './lib/yfiles'
  },
  packages: {
    'yfiles': {
      defaultExtension: 'js',
    }
  },
});

Promise.all([<% moduleList.forEach(function (module) { %>System.import("<%= module %>"),
    <%  }); %>
]).then(function(retVals) {

  var yfiles = retVals[0];
  <%
  var licenseWithIndent = licenseContent.split("\n").join("\n  ");
  %>
  yfiles.license = <%-licenseWithIndent%>;

  var <%= name %> = yfiles.lang.Class('<%= name %>', {
    'initialize': function() {
      // create a GraphComponent
      var graphComponent = new yfiles.view.GraphComponent('#graphComponent');
    <% if (useShapeNodeStyle) { %>
      // create and configure a default node style
      graphComponent.graph.nodeDefaults.style = new yfiles.styles.ShinyPlateNodeStyle({
        fill: yfiles.view.Fill.ORANGE,
        drawShadow: true
      });
    <% } %>

      // get the IGraph
      var graph = graphComponent.graph;
      // create some nodes
      var node1 = graph.createNode(new yfiles.geometry.Rect(50, 50, 30, 30));
      var node2 = graph.createNode();

      // create an edge
      graph.createEdge(node1, node2);
    <% if (useGraphEditorInputMode) { %>
      // create an input mode
      graphComponent.inputMode = new yfiles.input.GraphEditorInputMode();
    <% }%>
      <% if (layout) { %>
      // execute a layout
      graphComponent.morphLayout(new <%=layout%>());
      <% } %>
    },

    'constructor': function () {
      this.initialize();
    }
  });
  new <%= name %>();
});
