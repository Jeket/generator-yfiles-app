module.exports = function (grunt) {
  require("load-grunt-tasks")(grunt);
  <% if (useWebpack) {
  %>var webpackConfig = require("./webpack.config.js");
  var path = require("path");
  var extend = require("deep-extend");<%
  } %>

  var applicationName = "<%= applicationName + '.js'%>",
    source = "<%= appPath %>",
    scriptsSrc = "<%= scriptsPath %>",
    libSrc = "<%= libPath %>",
    destination = "<%= distPath %>",
    scriptsDest = destination + "scripts/",
    packageLibDest = "<%= packageLibPath %>";

  grunt.registerTask("default", [
    "clean:all",
    "copy:nonJsSource",<% if (gruntBabel) { %>
    "babel:dist",<% } %>
    "package",
    <% if (useWebpack) {
    %>"webpack:build"<%
    } else {
    %>"copy:license",
    "browserify"<%
    } %>
  ]);

  <% if (useWebpack) {
  %>grunt.registerTask("build-dev", "Leaves out time expensive packaging", [
    "clean:all",
    "copy:nonJsSource",
    "webpack:build-dev"
  ]);<%
  } %>

  grunt.registerTask("dev-server", "Starts a dev server.", [<% if (useWebpack) {
    %>"webpack-dev-server:start"<% } else { %>"express:dev", "watch"<% } %>]);

  grunt.initConfig({
    pkg: grunt.file.readJSON("package.json"),
    package: {
      options: {
        libSrc: libSrc,
        libDest: packageLibDest,
        modules: [
          "yfiles/es5-shim"<% modules.forEach(function (module){ %>,
          "<%= module %>"<%}); %>
        ],
        files: [{
          expand: true,
          cwd: <% if (gruntBabel) { %>packageLibDest<% } else { %>scriptsSrc<% } %>,
          src: ["**/*.js", "!**/license.js"],<%
        if (useBrowserify || useWebpack) { %>
          dest: packageLibDest
        }<%
        } else { %>
          dest: scriptsDest
        }, {
          expand: true,
          cwd: "./bower_components/requirejs/",
          src: ["require.js"],
          dest: scriptsDest
        }<% } %>],
        obfuscate: true,
        optimize: true<% if (!(useBrowserify || useWebpack)) { %>,
        createModulesBundle: true<% } %>
      },
      build: {
        // This empty target is required for technical reasons. Don't remove it.
      }
    },
    clean: {
      // Without the 'force' option, this task cannot delete files outside this file's subtree
      options: {force: true},
      // Remove all created files in the destination directories.
      all: [destination, packageLibDest]
    },
    copy: {
      // Copies non-JavaScript source code files to the destination.
      nonJsSource: {
        files: [{
          // copy resources
          expand: true,
          cwd: source,
          src: ["**", "!**/*.js", "!lib**", "!lib/yfiles**"],
          dest: destination
        }]
      }<% if (!useWebpack) { %>,
      license: {
        // The license must not be obfuscated. Therefore, it is copied separately.
        expand: true,
        cwd: scriptsSrc,
        src: ["license.js"],
        dest: scriptsDest
      }<% } %>
    },<% if (useWebpack) { %>
    webpack: {
      "build-dev": webpackConfig,
      // extend modifies the original object, so start with a new one
      build: extend({}, webpackConfig, {
        entry: {
          app: [path.resolve(packageLibDest + applicationName)]
        },
        resolve: {
          root: [path.resolve(packageLibDest)]
        }
      })
    },
    "webpack-dev-server": {
      options: {
        webpack: webpackConfig,
        publicPath: "/dist"
      },
      start: {
        keepAlive: true
      }
    }<% } else {%>
    browserify: {
      dist: {
        <% if (!useBrowserify) {
        %>options: {
          browserifyOptions: {
            standalone: "yfiles",
            paths: packageLibDest
          }
        },
        src: [packageLibDest + "yfiles/modules-bundle.js"],
        dest: destination + "lib/yfiles.js"<%
        } else {
        %>src: [packageLibDest + applicationName],
        dest: scriptsDest + applicationName<%
        } %>
      }
    },
    watch: {
      scripts: {
        files: [scriptsSrc + "**/*.js"],
        tasks: ["default"],
        options: {
          spawn: false
        }
      }
    },
    express: {
      options: {},
      dev: {
        options: {
          script: "server.js"
        }
      }
    },
    babel: {
      options: {
        sourceMap: true,
        presets: ["es2015"]<% if (useTypeInfo) { %>,
        ignore: /yfiles-typeinfo\.js/<% } %>
      },
      dist: {
        files: [{
        expand: true,
        cwd: scriptsSrc,
        src: ["**.js"],
        dest: packageLibDest
        }]
      }
    }<% } %>
  });
};
